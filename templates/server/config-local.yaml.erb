# FILE GENERATED BY PUPPET
# DO NOT EDIT. CHANGES WILL BE OVERWRITTEN.

# External TCP port to listen on for client connections.
# default = 8080
port: <%= @server_port %>

################################################################################
# SSL/TLS configuration
################################################################################

# default = false
#enable_ssl: true
enable_ssl: <%= @enable_ssl %>

# SSL certificate and private key paths
# (required if tls_proxy == true)
server_certificate: '<%= @ssl_cert %>'
private_key: '<%= @ssl_key %>'

# SSL private key password
# (if the server private key file is password protected)
private_key_pass: '<%= @ssl_key_pass %>'

# TLS CA Cert to validate user certs against
# only used if use_tls_user_auth == true
ca_cert: '<%= @ssl_ca %>'

################################################################################
# Authentication options
################################################################################

# Enable certificate-based user authentication
# default = false
#cert_user_auth: false
cert_user_auth: <%= @cert_user_auth %>

# Are we operating behind a reverse proxy that terminates SSL?
# Only has an effect when cert_user_auth is also true, in which case we expect
# the reverse proxy to inject special headers containing the data from the user
# certificate.
# default = false
#behind_reverse_proxy: false
behind_reverse_proxy: <%= @behind_reverse_proxy %>

################################################################################
# SVMP Overseer settings
################################################################################

# Base URL for the SVMP Overseer API used to facilitate user VM setup
overseer_url: '<%= @overseer_url %>'

# Used to verify JSON Web Tokens presented by clients
# this is generated by the overseer, must be placed here manually
overseer_cert: '<%= @overseer_cert %>'

# JSON web token to authenticate to the login server as an admin user.
# Generate and obtain this string from the overseer node.
auth_token: '<%= @auth_token %>'

################################################################################
# Logging options
################################################################################

# Log file path
log_file: '<%= @log_dir %>/<%= @log_file %>'

# Log level to use, omits lower log levels
# Levels, lowest to highest: silly, debug, verbose, info, warn, error
# default = 'info'
log_level: '<%= @log_level %>'

# Protobuf request messages to filter out when using verbose logging
# default = ['SENSOREVENT', 'TOUCHEVENT']
#log_request_filter: ['SENSOREVENT', 'TOUCHEVENT']
log_request_filter: [
                      <%- @log_filter.each do |val| -%>
                          '<%= val %>',
                      <%- end -%>
                    ]


################################################################################
# WebRTC settings for video and audio streaming to the client
################################################################################

webrtc:
    # Enter zero or more servers to use for in ICE negotiation for NAT traversal
    ice_servers:
        <%- @ice_servers.each do |val| -%>
        - url: '<%= val['url'] %>'
          <%- if val['username'] -%>
          username: '<%= val['username'] %>'
          <%- end -%>
          <%- if val['password'] -%>
          password: '<%= val['password'] %>'
          <%- end -%>
    <%- end -%>

    # WebRTC constraints and paramenters that are sent to the peers.
    # Don't change unless you know what you're doing.
    #video: { audio: true, video: { mandatory: {}, optional: [] } }
    #pc: { optional: [ {DtlsSrtpKeyAgreement: true} ] }
